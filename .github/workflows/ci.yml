name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Frontend Testing and Building
  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/web-frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './apps/web-frontend/package-lock.json'

    - name: Install dependencies
      run: npm ci

    - name: Type check
      run: npm run type-check

    - name: Lint
      run: npm run lint

    - name: Run tests
      run: npm run test -- --coverage

    - name: Build
      run: npm run build

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./apps/web-frontend/coverage/lcov.info
        flags: frontend

  # Backend Testing
  backend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/api-gateway

    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: jobapp_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.6.1
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Setup database
      run: |
        poetry run python -c "
        import asyncio
        import asyncpg
        
        async def setup_db():
            conn = await asyncpg.connect('postgresql://postgres:postgres@localhost:5432/jobapp_test')
            await conn.execute('CREATE EXTENSION IF NOT EXISTS vector')
            await conn.execute('CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"')
            await conn.close()
        
        asyncio.run(setup_db())
        "
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/jobapp_test

    - name: Lint with ruff
      run: poetry run ruff check .

    - name: Check formatting with black
      run: poetry run black --check .

    - name: Type check with mypy
      run: poetry run mypy app --ignore-missing-imports

    - name: Run tests
      run: poetry run pytest --cov=app --cov-report=xml
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/jobapp_test
        REDIS_URL: redis://localhost:6379/1
        JWT_SECRET_KEY: test-secret-key-for-testing-32-chars
        OPENAI_API_KEY: test-key

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./apps/api-gateway/coverage.xml
        flags: backend

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Setup Node.js for frontend security scan
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install frontend dependencies
      run: cd apps/web-frontend && npm ci

    - name: Run npm audit
      run: cd apps/web-frontend && npm audit --audit-level=moderate

    - name: Setup Python for backend security scan
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Safety
      run: pip install safety

    - name: Run safety check
      run: cd apps/api-gateway && safety check --json --output safety-report.json || true

  # Build and Push Docker Images
  build-images:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, security]
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        component: [frontend, api-gateway]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./apps/${{ matrix.component == 'frontend' && 'web-frontend' || matrix.component }}
        file: ./apps/${{ matrix.component == 'frontend' && 'web-frontend' || matrix.component }}/Dockerfile${{ github.ref == 'refs/heads/main' && '' || '.dev' }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Development
  deploy-dev:
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to development
      run: |
        echo "Deploying to development environment..."
        # Add deployment commands here
        # Example: kubectl apply -f k8s/dev/
        # Or: aws ecs update-service --cluster dev --service jobapp-dev

  # Deploy to Production
  deploy-prod:
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add production deployment commands here
        # Example: kubectl apply -f k8s/prod/
        # Or: aws ecs update-service --cluster prod --service jobapp-prod

  # Notify on failure
  notify-failure:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, security, build-images]
    if: failure()
    
    steps:
    - name: Notify team of CI failure
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: 'CI Pipeline failed! Please check the logs.'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 